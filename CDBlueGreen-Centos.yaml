# Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License. A copy of the License is located at
#
# http://aws.amazon.com/apache2.0/
#
# CDBlueGreen.yaml
#
# This is a CloudFormation template that creates the sample environment
# for the demonstration of the blue/green deployments for AWS CodeDeploy.
#
# The main components that are created include:
#
# BlueGreenLaunchConfig - This is a launch configuration that will
# bring up instances with version 1 of the code.
#
# BlueGreenWorkstation - This will be where a user logs into run 
# the CodeDeploy tools to deploy version 2 of the code.

AWSTemplateFormatVersion: '2010-09-09'
Description: Create the VPC framework for the Centos BlueGreen environment.

# Define the mappings for the Centos in the regions that
# offer CodeDeploy.

Mappings:
  RegionMap:
    ap-northeast-1:
      centos: ami-01748a72bed07727c
    ap-northeast-2:
      centos: ami-0094965d55b3bb1ff
    ap-southeast-1:
      centos: ami-00b8d9cb8a7161e41
    ap-southeast-2:
      centos: ami-06ce513624b435a22
    ca-central-1:
      centos: ami-0c3e7f50c89a372ae
    eu-central-1:
      centos: ami-03c3a7e4263fd998c
    eu-west-1:
      centos: ami-01720b5f421cf0179
    eu-west-2:
      centos: ami-0e80a462ede03e653
    us-east-1:
      centos: ami-0be2609ba883822ec
    us-east-2:
      centos: ami-0a0ad6b70e61be944
    us-west-1:
      centos: ami-03130878b60947df3
    us-west-2:
      centos: ami-0a36eb8fadc976275

# Offer the IP of the workstation host so the template user can log in.

Outputs:
  LoadBalancer:
    Description: DNS Name of AWS Elastic Load Balancer
    Value: !GetAtt BlueGreenLB.DNSName

  AutoScalingGroup:
    Description: Initial auto scaling group
    Value: !Ref BlueGreenASG

  WorkStationIP:
    Description: IP address of workStation host
    Value: !GetAtt BlueGreenWorkStation.PublicIp

# Request a key pair, AZ, and a prefix that will be used to assign
# resource name tags.

Parameters:
  AZName:
    Description: Subnet availability zone
    Type: AWS::EC2::AvailabilityZone::Name
  BlueGreenKeyPairName:
    Description: EC2 keypair for hosts
    Type: AWS::EC2::KeyPair::KeyName
  NamePrefix:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    Default: bluegreen
    Description: Prefix for resource tags made by this template (2-15 chars).
    MaxLength: 15
    MinLength: 2
    Type: String
  ProjectReleaseMedia:
    Default: ''
    Description: Amazon S3 path to download project .zip file (s3://centos-bluegreenbucket/newversion.zip)
    Type: String

Resources:

  # VpcName - VPC for the entire demo

  VpcName:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.200.0.0/16
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      Tags:
      - Key: Name
        Value:
          !Join ["", [ Ref: NamePrefix, "-vpc"] ]

  # VpcInternetGateway: Internet gateway for the VPC

  VpcInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value:
          !Join ["", [ Ref: NamePrefix, "-igw"] ]

  # VpcInternetGatewayAttachment - attach the internet gateway to the VPC
  # Note that several resources have a "DependsOn" key for this
  # attachment (e.g. routes, EC2, etc.) to inform CloudFormation of the
  # relationship.
                  
  VpcInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref VpcInternetGateway
      VpcId: !Ref VpcName

  # The single subnet in the VPC.  For simplicity, all hosts will receive
  # a public IP.

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AZName
      CidrBlock: 10.200.11.0/24
      MapPublicIpOnLaunch: 'true'
      Tags:
      - Key: Name
        Value:
          !Join ["", [ Ref: NamePrefix, "-public-sn"] ]
      VpcId: !Ref VpcName

  # VpcRouteTable - The routing table for the VPC

  VpcRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Name
        Value:
          !Join ["", [ Ref: NamePrefix, "-rtb"] ]
      VpcId: !Ref VpcName

  # DefaultRoute - Add the default route to the Internet gateway.  The
  # gateway must be attached to the VPC before this can be done, hence
  # the "DependsOn" key.

  DefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: VpcInternetGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VpcInternetGateway
      RouteTableId: !Ref VpcRouteTable

  # PublicSubenetRtb: Add the public subnet to the route table

  PublicSubnetRtb:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VpcRouteTable
      SubnetId: !Ref PublicSubnet

  # BlueGrenApp - CodeDeploy application

  BlueGreenApp:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Join ["", [ Ref: NamePrefix, "-app"] ]

  # BlueGreenDG - CodeDeploy deployment group

  BlueGreenDG:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref BlueGreenApp
      DeploymentGroupName: !Join ["", [ Ref: NamePrefix, "-dg"] ]
      ServiceRoleArn: !GetAtt BlueGreenDeployRole.Arn

  # BlueGreenWorkStationRole - The instance role for the workstation host
  #
  # The workstation host will need to have all of the permissions needed for the
  # user to run CodeDeploy.  You can find this list at the link below.
  #
  # http://docs.aws.amazon.com/codedeploy/latest/userguide/
  # instances-ec2-create-cloudformation-template.html

  BlueGreenWorkStationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy
      Policies: 
      - PolicyName: "root"
        PolicyDocument: 
          Version: "2012-10-17"
          Statement: 
          - Effect: "Allow"
            Action: 
            - autoscaling:*
            - codedeploy:*
            - ec2:*
            - elasticloadbalancing:*
            - iam:AddRoleToInstanceProfile
            - iam:CreateInstanceProfile
            - iam:CreateRole
            - iam:DeleteInstanceProfile
            - iam:DeleteRole
            - iam:DeleteRolePolicy
            - iam:GetInstanceProfile
            - iam:GetRole
            - iam:GetRolePolicy
            - iam:ListInstanceProfilesForRole
            - iam:ListRolePolicies
            - iam:ListRoles
            - iam:PassRole
            - iam:PutRolePolicy
            - iam:RemoveRoleFromInstanceProfile 
            - s3:*
            Resource: "*"

  # BlueGreenWorkStationProfile - Instance profile for the workstation role

  BlueGreenWorkStationProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - Ref: BlueGreenWorkStationRole

  # BlueGreenWorkStationSecurity Group
  #
  # This is the security group for the workstation.  It only needs SSH access.

  BlueGreenWorkStationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: '22'
        IpProtocol: tcp
        ToPort: '22'
      Tags:
      - Key: Name
        Value:
          !Join ["", [ Ref: NamePrefix, "-workstation-sg"] ]
      VpcId: !Ref VpcName

  # BlueGreenWorkStation - Create the CodeDeploy workstation

  BlueGreenWorkStation:
    Type: "AWS::EC2::Instance"
    DependsOn: VpcInternetGatewayAttachment
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
          - centos1
        centos1:
          files:
            #
            # cfn-hup.conf - for the CloudFormation helper scripts
            #
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              group: root
              mode: '000400'
              owner: root
            #
            # cfn-auto-reloader.conf - for the CloudFormation helper scripts
            #
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.BlueGreenLaunchConfig.Metadata.AWS::CloudFormation::Init
                action=/usr/local/bin/cfn-init -v -s ${AWS::StackId} -r BlueGreenWorkStation --region ${AWS::Region}
                runas=root
              group: root
              mode: '000400'
              owner: root
            #
            # updatedeploymentgroup.sh
            #
            # This script is run after cfn-init to change the settings of the
            # deployment group to be BlueGreen.  CloudFormation does not
            # have currently support the creation of Blue/Green deployment
            # groups.  For this reason CloudFormation is used to create an "in
            # place" deployment group and then we use updatedeploymentgroup.sh
            # to update it to BlueGreen.  This allows CloudFormation to delete
            # the deployment group when the stack is deleted.
            #
            /home/ec2-user/scripts/updatedeploymentgroup.sh:
              content: !Sub |
                #!/bin/bash
                DeployType="BLUE_GREEN,deploymentOption=WITH_TRAFFIC_CONTROL"
                BlueGreenConf=\
                "terminateBlueInstancesOnDeploymentSuccess={action=KEEP_ALIVE}"\
                ",deploymentReadyOption={actionOnTimeout=CONTINUE_DEPLOYMENT}"\
                ",greenFleetProvisioningOption={action=COPY_AUTO_SCALING_GROUP}"
                aws deploy update-deployment-group \
                --application-name "${BlueGreenApp}" \
                --current-deployment-group-name "${BlueGreenDG}" \
                --service-role-arn "${BlueGreenDeployRole.Arn}" \
                --auto-scaling-groups "${BlueGreenASG}" \
                --load-balancer-info elbInfoList=[{name="${BlueGreenLB}"}] \
                --deployment-style "deploymentType=$DeployType" \
                --blue-green-deployment-configuration "$BlueGreenConf" >/dev/null
              group: ec2-user
              mode: '000755'
              owner: ec2-user
            /home/ec2-user/scripts/pushnewversion.sh:
              content: !Sub |
                #!/bin/bash
                aws deploy push \
                  --application-name ${BlueGreenApp} \
                  --description "new version" \
                  --ignore-hidden-files \
                  --s3-location ${ProjectReleaseMedia} \
                  --source /home/ec2-user/newversion
              group: ec2-user
              mode: '000755'
              owner: ec2-user
            #
            # cleanup.sh
            #
            # This is used to remove the code deployment bundle from S3
            # as well as the autoscaling groups that were created. The
            # reason this is being done is that CloudFormation can only
            # clean up what it knows about.  If these resources do not
            # get manually deleted, CloudFormation cannot remove the
            # entire stack.
            #
            /home/ec2-user/scripts/cleanup.sh:
              content: !Sub |
                #!/bin/bash
                echo Removing deployment bundle from S3...
                aws s3 rm ${ProjectReleaseMedia}
                echo Removing additional autoscaling group...
                aws autoscaling describe-auto-scaling-groups \
                --query \
                'AutoScalingGroups[].[AutoScalingGroupName,VPCZoneIdentifier]' \
                --output text | \
                grep ${PublicSubnet} | \
                cut -f1 | \
                xargs -n1 aws autoscaling delete-auto-scaling-group \
                --force-delete \
                --auto-scaling-group-name
              group: ec2-user
              mode: '000755'
              owner: ec2-user
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
              awslogs:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - /etc/awslogs/awslogs.conf
                packages:
                  yum:
                  - awslogs
    Properties: 
      AvailabilityZone: !Ref AZName
      IamInstanceProfile: !Ref BlueGreenWorkStationProfile
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - Ref: AWS::Region
        - centos
      InstanceType: t2.micro
      KeyName: !Ref BlueGreenKeyPairName
      SecurityGroupIds: 
      - Ref: BlueGreenWorkStationSecurityGroup
      SubnetId: !Ref PublicSubnet
      Tags: 
      - Key: Name
        Value:
          !Join ["", [ Ref: NamePrefix, "-workstation"] ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          function error_exit
          {
            /opt/aws/bin/cfn-signal -e 1 -r "$1" --stack ${AWS::StackId} --resource BlueGreenWorkStation --region ${AWS::Region}
            exit 1
          }
          yum -y update
          yum update -y aws-cfn-bootstrap
          yum install -y aws-cli
          /opt/aws/bin/cfn-init --region ${AWS::Region} -s ${AWS::StackId} -r BlueGreenWorkStation
          sudo -u ec2-user aws configure set region ${AWS::Region}
          sudo -u ec2-user /home/ec2-user/scripts/updatedeploymentgroup.sh
          /opt/aws/bin/cfn-signal -e 0 -r 'BlueGreen configuration' --stack ${AWS::StackId} --resource BlueGreenWorkStation --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT30M

  # BlueGreenDeployRole: This is the role that will be used by the
  # CodeDeploy service.  Its sole purpose is to provide access to
  # the CodeDeploy service.  It is not used by the EC2 instances
  # themselves.

  BlueGreenDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - codedeploy.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole

  BlueGreenInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - Ref: BlueGreenInstanceRole

  BlueGreenInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy 

  # BlueGreenLB
  #
  # This is the load balancer that will be used to support the BlueGreen
  # environment.

  BlueGreenLB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    DependsOn: VpcInternetGatewayAttachment
    Properties:
      ConnectionSettings:
        IdleTimeout: 1
      HealthCheck:
        HealthyThreshold: '2'
        Interval: '15'
        Target: TCP:80
        Timeout: '5'
        UnhealthyThreshold: '2'
      Listeners:
      - InstancePort: '80'
        InstanceProtocol: TCP
        LoadBalancerPort: '80'
        Protocol: TCP
      Scheme: internet-facing
      SecurityGroups:
      - Ref: BlueGreenWebSecurityGroup
      Subnets:
      - Ref: PublicSubnet
      Tags:
      - Key: Name
        Value:
          !Join ["", [ Ref: NamePrefix, "-elb"] ]

  # BlueGreenASG
  #
  # This is the autoscaling group for the Blue/Green environment.
  # This will be used for version 1 of the code.  When version 2 is
  # deployed, CodeDeploy will copy this autoscaling group and attach
  # new instances to it.

  BlueGreenASG:
    DependsOn: VpcInternetGatewayAttachment
    Properties:
      Cooldown: '60'
      LaunchConfigurationName:
        Ref: BlueGreenLaunchConfig
      LoadBalancerNames:
      - Ref: BlueGreenLB
      MaxSize: '2'
      MinSize: '2'
      Tags:
      - Key: Name
        PropagateAtLaunch: 'true'
        Value:
          !Join ["", [ Ref: NamePrefix, "-asg"] ]
      VPCZoneIdentifier:
      - Ref: PublicSubnet
    CreationPolicy:
      ResourceSignal:
        Count: '2'
        Timeout: PT30M
    Type: AWS::AutoScaling::AutoScalingGroup

  # BlueGreenWebSecurityGroup
  #
  # This is the security group for the instances created
  # by the launch configuration.  Only ports 22 and 80
  # are needed.

  BlueGreenWebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to web servers
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: '22'
        IpProtocol: tcp
        ToPort: '22'
      - CidrIp: 0.0.0.0/0
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      Tags:
      - Key: Name
        Value:
          !Join ["", [ Ref: NamePrefix, "-web-sg"] ]
      VpcId: !Ref VpcName

  # BlueGreenLaunchConfig
  #
  # This is the launch configuration for the autoscaling group.
  # The metadata will be used to install version 1 of the
  # application and to set up the CodeDeploy agent. It also
  # removes the index.html file which has a "higher" priority
  # in the Apache server.

  BlueGreenLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: VpcInternetGatewayAttachment
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
          - centos1
        centos1:
          packages:
            yum:
              nginx: []
          services:
            sysvinit:
              nginx:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/nginx/nginx.conf
    Properties:
      IamInstanceProfile: !Ref BlueGreenInstanceProfile
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - Ref: AWS::Region
        - centos
      InstanceType: t2.micro
      KeyName: !Ref BlueGreenKeyPairName
      SecurityGroups:
      - Ref: BlueGreenWebSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          function error_exit
          {
            opt/aws/bin/cfn-signal -e 1 -r "$1" --stack ${AWS::StackId} --resource BlueGreenASG --region ${AWS::Region}
            exit 1
          }
          yum update -y
          yum update -y aws-cfn-bootstrap
          yum install -y aws-cli

          mkdir -p /etc/cfn/hooks.d
          cat << EOF > /etc/cfn/cfn-hup.conf
          [main]
          stack=${AWS::StackId}
          region=${AWS::Region}
          EOF

          cat << EOF > /etc/cfn/hooks.d/cfn-auto-reloader.conf
          [cfn-auto-reloader-hook]
          triggers=post.update
          path=Resources.BlueGreenLaunchConfig.Metadata.AWS::CloudFormation::Init
          action=/usr/local/bin/cfn-init -v -s ${AWS::StackId} -r BlueGreenLaunchConfig --region ${AWS::Region}
          runas=root
          EOF

          # add document root
          mkdir -p /var/www/
          aws s3 cp ${ProjectReleaseMedia} /var/www || error_exit 'Failed to download Project Release Media.'
          unzip -q /var/www/newversion.zip -d /var/www/
          rm -fr /var/www/html && mv /var/www/content /var/www/html
          chown -R ec2-user:ec2-user /var/www/

          # Install the AWS CodeDeploy Agent.
          cd /home/ec2-user/
          aws s3 cp s3://aws-codedeploy-${AWS::Region}/latest/codedeploy-agent.noarch.rpm . || error_exit 'Failed to download AWS CodeDeploy Agent.'
          yum install -y ruby || error_exit 'Failed to install AWS CodeDeploy Agent.' 
          yum install -y codedeploy-agent.noarch.rpm || error_exit 'Failed to install AWS CodeDeploy Agent.'

          # Install nginx
          amazon-linux-extras install -y nginx1
          sed -i 's/usr\/share\/nginx\/html/var\/www\/html/g' /etc/nginx/nginx.conf
          sudo sed -i 's/user nginx/user ec2-user/g' /etc/nginx/nginx.conf
          systemctl enable nginx
          systemctl start nginx

          # Install php
          amazon-linux-extras enable php7.4
          yum -y install php-cli php-pdo php-fpm php-json php-mysqlnd
          yum -y install php-opcache php-xml php-gd php-devel php-intl php-mbstring php-bcmath php-json php-iconv php-soap
          sed -i 's/memory_limit = 128M/memory_limit = -1/g' /etc/php.ini
          sed -i 's/user = apache/user = ec2-user/g' /etc/php-fpm.d/www.conf
          sed -i 's/group = apache/group = ec2-user/g' /etc/php-fpm.d/www.conf
          sed -i 's/;listen.owner = nobody/listen.owner = ec2-user/g' /etc/php-fpm.d/www.conf
          sed -i 's/;listen.group = nobody/listen.group = ec2-user/g' /etc/php-fpm.d/www.conf
          sed -i 's/;listen.mode = 0660/listen.mode = 0660/g' /etc/php-fpm.d/www.conf
          sed -i 's/;listen.mode = 0660/listen.mode = 0660/g' /etc/php-fpm.d/www.conf
          sed -i 's/listen.acl_users/;listen.acl_users/g' /etc/php-fpm.d/www.conf
          sed -i 's/php-fpm/unix:\/run\/php-fpm\/www.sock/g' /etc/nginx/default.d/php.conf
          systemctl enable php-fpm
          systemctl start php-fpm
          
          /opt/aws/bin/cfn-init --region ${AWS::Region} -s ${AWS::StackId} -r BlueGreenLaunchConfig
          /opt/aws/bin/cfn-hup || error_exit ''Failed to start cfn-hup''
          /opt/aws/bin/cfn-signal -e 0 -r 'BlueGreen configuration' --stack ${AWS::StackId} --resource BlueGreenASG --region ${AWS::Region}